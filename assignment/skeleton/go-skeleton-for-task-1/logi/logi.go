package logi

// All the comments generated by ChatGPT

import (
	"fmt"
	"log"
)

const (
	// Color constants for terminal text formatting (using ANSI escape sequences)
	ColorReset         = "\033[0m"  // Resets the color back to default
	ColorBlack         = "\033[30m" // Black text color
	ColorRed           = "\033[31m" // Red text color
	ColorGreen         = "\033[32m" // Green text color
	ColorYellow        = "\033[33m" // Yellow text color
	ColorBlue          = "\033[34m" // Blue text color
	ColorMagenta       = "\033[35m" // Magenta text color
	ColorCyan          = "\033[36m" // Cyan text color
	ColorWhite         = "\033[37m" // White text color
	ColorBrightBlack   = "\033[90m" // Bright black text color
	ColorBrightRed     = "\033[91m" // Bright red text color
	ColorBrightGreen   = "\033[92m" // Bright green text color
	ColorBrightYellow  = "\033[93m" // Bright yellow text color
	ColorBrightBlue    = "\033[94m" // Bright blue text color
	ColorBrightMagenta = "\033[95m" // Bright magenta text color
	ColorBrightCyan    = "\033[96m" // Bright cyan text color
	ColorBrightWhite   = "\033[97m" // Bright white text color
)

// `peerColors` stores a mapping of peers to their associated colors
var peerColors = map[string]string{}

// `colorList` is a list of colors to be cycled through for each peer
var colorList = []string{ColorYellow, ColorBrightBlue, ColorMagenta, ColorCyan, ColorWhite}

// getColorForPeer returns a color for a specific peer based on the peer's identifier.
// If the peer already has a color assigned, it returns the stored color.
// Otherwise, it assigns a new color from the colorList, cycling through colors.
func getColorForPeer(peer string) string {
	// Check if the peer already has an assigned color
	if color, exists := peerColors[peer]; exists {
		return color // Return the stored color if it exists
	}
	// Otherwise, assign a new color by cycling through colorList
	color := colorList[len(peerColors)%len(colorList)]
	peerColors[peer] = color // Store the new color for the peer
	return color
}

// LogWithColor logs a message with the assigned color for a specific peer.
// It formats the message by appending the color before and after the message text.
func LogWithColor(peer string, msg string) {
	// Retrieve the color for the peer and format the log message
	color := getColorForPeer(peer)
	// Print the formatted log message with the color applied
	log.Printf("%s%s%s\n", color, msg, ColorReset)
}

// LogSent logs a message indicating a message was sent to a peer, with color formatting.
func LogSent(peer string, msg interface{}) {
	LogWithColor(peer, fmt.Sprintf("~~~~~~~~Sending message: %v to peer %s", msg, peer))
}

// LogReceived logs a message indicating a message was received from a peer, with color formatting.
func LogReceived(peer string, msg interface{}) {
	LogWithColor(peer, fmt.Sprintf("++++++++Received message: %v from peer %s", msg, peer))
}
